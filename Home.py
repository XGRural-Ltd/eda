import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pickle
import kagglehub

from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import IsolationForest
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score, davies_bouldin_score

# Configura√ß√£o inicial da p√°gina
path = kagglehub.dataset_download("maharshipandya/-spotify-tracks-dataset")
path_dataset = path + '/dataset.csv'
df=pd.read_csv(path_dataset, index_col=0)

# Sidebar - Sele√ß√£o de se√ß√µes
section = st.sidebar.radio("Selecione uma etapa da an√°lise:", (
    "1. Vis√£o Geral dos Dados",
    "2. An√°lise Univariada",
    "3. Correla√ß√£o entre Vari√°veis",
    "4. Detec√ß√£o de Outliers",
    #"5. Pr√©-processamento",
    #"6. Redu√ß√£o de Dimensionalidade",
    #"7. Clusteriza√ß√£o",
    #"8. Avalia√ß√£o dos Clusters"
))
num_features = df.select_dtypes(include=['float64', 'int64']).columns.tolist()

if section == "1. Vis√£o Geral dos Dados":
    st.subheader("üìä Informa√ß√µes Gerais do Dataset")
    st.write("Nesta etapa vamos ficar mais familiarizados com os dados. Vamos explorar as colunas, tipos de dados, valores ausentes, estat√≠sticas descritivas e visualizar alguns plots.")

    num_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
    

    st.markdown("**Visualize o DataFrame com as colunas selecionadas:**")
    cols = st.multiselect("Colunas para exibir:", df.columns.tolist(), default=df.columns[:6].tolist())
    st.dataframe(df[cols].head(15))

    
    st.markdown("**Tipos de dados e valores ausentes:**")
    if st.checkbox("Mostrar dtypes e valores nulos"):
        col1, col2 = st.columns(2)
        with col1:
            st.write(df.dtypes.astype(str))
        with col2:
            st.write(df.isnull().sum())

    st.markdown("**Estat√≠sticas descritivas:**")
    if st.checkbox("Exibir estat√≠sticas descritivas"):
        st.write(df.describe())

    st.markdown("---")
    st.subheader("üßæ Dicion√°rio de Dados: Descri√ß√£o das Colunas")

    col_descriptions = {
        "track_id": "O ID do Spotify para a faixa.",
        "artists": "Nomes dos artistas que performaram a faixa. Se houver mais de um, s√£o separados por ponto e v√≠rgula.",
        "album_name": "Nome do √°lbum no qual a faixa aparece.",
        "track_name": "Nome da faixa.",
        "popularity": "Popularidade da faixa (0 a 100), baseada em n√∫mero e rec√™ncia de reprodu√ß√µes.",
        "duration_ms": "Dura√ß√£o da faixa em milissegundos.",
        "explicit": "Indica se a faixa possui conte√∫do expl√≠cito (True = sim, False = n√£o).",
        "danceability": "Qu√£o dan√ßante √© a faixa, de 0.0 (menos) a 1.0 (mais dan√ßante).",
        "energy": "Energia percebida da faixa, de 0.0 a 1.0.",
        "key": "Tom da m√∫sica (0 = D√≥, 1 = D√≥‚ôØ/R√©‚ô≠, ..., -1 = indetect√°vel).",
        "loudness": "Volume geral da faixa em decib√©is (dB).",
        "mode": "Modalidade: 1 = maior, 0 = menor.",
        "speechiness": "Detecta presen√ßa de fala. 1.0 = fala pura; 0.0 = m√∫sica pura.",
        "acousticness": "Confian√ßa de que a faixa √© ac√∫stica (0.0 a 1.0).",
        "instrumentalness": "Probabilidade de n√£o conter vocais. Pr√≥ximo de 1.0 = instrumental.",
        "liveness": "Probabilidade de ter sido gravada ao vivo. Acima de 0.8 = performance ao vivo.",
        "valence": "Qu√£o positiva √© a m√∫sica (0.0 = triste, 1.0 = alegre).",
        "tempo": "Tempo estimado da faixa (batidas por minuto).",
        "time_signature": "Compasso estimado (de 3 a 7).",
        "track_genre": "G√™nero musical da faixa."
    }

    # Ordena colunas dispon√≠veis por ordem alfab√©tica
    available_columns = list(col_descriptions.keys())
    selected_columns = st.multiselect("Selecione as colunas que deseja entender melhor:", available_columns)

    if selected_columns:
        for col in selected_columns:
            st.markdown(f"**üîπ {col}**: {col_descriptions[col]}")
    
    st.markdown("---")
    st.subheader("üìà Visualiza√ß√µes Gerais de Distribui√ß√£o")

    selected_col = st.selectbox("Selecione uma coluna num√©rica:", num_cols)
    plot_type = st.radio("Tipo de gr√°fico:", ["Histograma", "Boxplot", "Ambos"])

    fig, axs = plt.subplots(1, 2 if plot_type == "Ambos" else 1, figsize=(14, 4))
    if plot_type == "Histograma" or plot_type == "Ambos":
        ax = axs[0] if plot_type == "Ambos" else axs
        sns.histplot(df[selected_col], kde=True, ax=ax, color='skyblue')
        ax.set_title(f"Histograma de {selected_col}")
    if plot_type == "Boxplot" or plot_type == "Ambos":
        ax = axs[1] if plot_type == "Ambos" else axs
        sns.boxplot(x=df[selected_col], ax=ax, color='salmon')
        ax.set_title(f"Boxplot de {selected_col}")
    st.pyplot(fig)

    st.markdown("---")
    st.subheader("üìà Gr√°ficos de Dispers√£o entre Vari√°veis Num√©ricas")
    if len(num_cols) >= 2:
        x_axis = st.selectbox("Vari√°vel no eixo X:", num_cols, index=0)
        y_axis = st.selectbox("Vari√°vel no eixo Y:", num_cols, index=1)
        fig, ax = plt.subplots()
        sns.scatterplot(data=df, x=x_axis, y=y_axis, alpha=0.5, ax=ax)
        ax.set_title(f"{y_axis} vs {x_axis}")
        st.pyplot(fig)


elif section == "2. An√°lise Univariada":
    st.subheader("üìà An√°lise Univariada Detalhada")

    st.markdown("Selecione uma ou mais vari√°veis para an√°lise:")
    selected_vars = st.multiselect("Vari√°veis num√©ricas:", num_features, default=[num_features[0]])

    scale_option = st.selectbox("Transforma√ß√£o da vari√°vel:", ["Nenhuma", "Log (log1p)", "Raiz quadrada (sqrt)"])

    for var in selected_vars:
        st.markdown(f"---\n### üéØ An√°lise da vari√°vel: `{var}`")

        # Aplicar transforma√ß√£o se necess√°rio
        data = df[var].copy()
        if scale_option == "Log (log1p)":
            data = np.log1p(data)
        elif scale_option == "Raiz quadrada (sqrt)":
            data = np.sqrt(data)

        # Estat√≠sticas descritivas
        st.markdown("**üìå Estat√≠sticas descritivas:**")
        stats = data.describe().to_frame(name=var)
        stats.loc['outliers_above_1.5iqr'] = np.sum(data > (stats.loc['75%'][0] + 1.5 * (stats.loc['75%'][0] - stats.loc['25%'][0])))
        stats.loc['outliers_below_1.5iqr'] = np.sum(data < (stats.loc['25%'][0] - 1.5 * (stats.loc['75%'][0] - stats.loc['25%'][0])))
        st.write(stats)

        # Gr√°ficos lado a lado
        col1, col2 = st.columns(2)
        with col1:
            fig1, ax1 = plt.subplots()
            sns.histplot(data, kde=True, ax=ax1, color='skyblue')
            ax1.set_title(f"Distribui√ß√£o de {var} ({scale_option})")
            st.pyplot(fig1)

        with col2:
            fig2, ax2 = plt.subplots()
            sns.boxplot(x=data, ax=ax2, color='lightcoral')
            ax2.set_title(f"Boxplot de {var} ({scale_option})")
            st.pyplot(fig2)

        # Mostrar valores extremos
        st.markdown("**üîé Valores extremos detectados (1.5 IQR):**")
        q1 = data.quantile(0.25)
        q3 = data.quantile(0.75)
        iqr = q3 - q1
        lower_bound = q1 - 1.5 * iqr
        upper_bound = q3 + 1.5 * iqr
        outliers = df[(data < lower_bound) | (data > upper_bound)][['track_name', var]]
        st.dataframe(outliers.head(10))

elif section == "3. Correla√ß√£o entre Vari√°veis":
    st.subheader("üìä Matriz de Correla√ß√£o")
    corr_method = st.selectbox("M√©todo de correla√ß√£o:", ["pearson", "spearman", "kendall"])
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(df[num_features].corr(method=corr_method), annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
    ax.set_title(f"Correla√ß√£o - m√©todo: {corr_method}")
    st.pyplot(fig)

elif section == "4. Detec√ß√£o de Outliers":
    st.subheader("üö® Detec√ß√£o de Outliers com Isolation Forest")
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(df[num_features])

    contamination = st.slider("Taxa de contamina√ß√£o (propor√ß√£o de outliers):", 0.01, 0.2, 0.05, step=0.01)
    iso = IsolationForest(contamination=contamination, random_state=42)
    df['anomaly'] = iso.fit_predict(X_scaled)
    outliers = df[df['anomaly'] == -1]

    st.write(f"Outliers detectados: {len(outliers)} m√∫sicas")
    st.dataframe(outliers[['track_name'] + num_features])

    # Gr√°fico com outliers
    st.subheader("üìç Visualiza√ß√£o de Outliers em 2D")
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)
    fig, ax = plt.subplots()
    ax.scatter(X_pca[:, 0], X_pca[:, 1], c=(df['anomaly'] == -1), cmap='coolwarm', alpha=0.6)
    ax.set_title("Outliers detectados via PCA")
    st.pyplot(fig)
